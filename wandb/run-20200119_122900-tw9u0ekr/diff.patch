diff --git a/.ipynb_checkpoints/Navigation-checkpoint.ipynb b/.ipynb_checkpoints/Navigation-checkpoint.ipynb
index dd97519..2e5beb8 100644
--- a/.ipynb_checkpoints/Navigation-checkpoint.ipynb
+++ b/.ipynb_checkpoints/Navigation-checkpoint.ipynb
@@ -30,6 +30,13 @@
     "%matplotlib inline"
    ]
   },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
   {
    "cell_type": "markdown",
    "metadata": {},
@@ -220,11 +227,27 @@
     "        # print and save Q-Network weights when a score of +13 over 100 episodes has been achieved \n",
     "        if np.mean(scores_window)>=13.0:\n",
     "            print('\\nEnviroment solved in {:d} episodes!\\tAverage Score: {:.2f}'.format(i_episode-100, np.mean(scores_window)))\n",
-    "            torch.save(agent.qnetwork_local.state_dict(), 'checkpoint.pth')\n",
+    "            torch.save(agent.qnetwork_local.state_dict(), 'checkpoint_wandb.pth')\n",
     "            break\n",
     "    return scores\n",
     "\n",
-    "scores = dqn()\n"
+    "\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "scores = dqn()"
    ]
   },
   {
diff --git a/Navigation.ipynb b/Navigation.ipynb
index dd97519..367282a 100644
--- a/Navigation.ipynb
+++ b/Navigation.ipynb
@@ -17,7 +17,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 1,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -30,6 +30,13 @@
     "%matplotlib inline"
    ]
   },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
   {
    "cell_type": "markdown",
    "metadata": {},
@@ -39,9 +46,32 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 2,
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "INFO:unityagents:\n",
+      "'Academy' started successfully!\n",
+      "Unity Academy name: Academy\n",
+      "        Number of Brains: 1\n",
+      "        Number of External Brains : 1\n",
+      "        Lesson number : 0\n",
+      "        Reset Parameters :\n",
+      "\t\t\n",
+      "Unity brain name: BananaBrain\n",
+      "        Number of Visual Observations (per agent): 0\n",
+      "        Vector Observation space type: continuous\n",
+      "        Vector Observation space size (per agent): 37\n",
+      "        Number of stacked Vector Observation: 1\n",
+      "        Vector Action space type: discrete\n",
+      "        Vector Action space size (per agent): 4\n",
+      "        Vector Action descriptions: , , , \n"
+     ]
+    }
+   ],
    "source": [
     "env = UnityEnvironment(file_name=\"Banana.app\")"
    ]
@@ -55,7 +85,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 3,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -83,9 +113,26 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 4,
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Number of agents: 1\n",
+      "Number of actions: 4\n",
+      "Example of a state: [1.         0.         0.         0.         0.84408134 0.\n",
+      " 0.         1.         0.         0.0748472  0.         1.\n",
+      " 0.         0.         0.25755    1.         0.         0.\n",
+      " 0.         0.74177343 0.         1.         0.         0.\n",
+      " 0.25854847 0.         0.         1.         0.         0.09355672\n",
+      " 0.         1.         0.         0.         0.31969345 0.\n",
+      " 0.        ]\n",
+      "States have length of: 37\n"
+     ]
+    }
+   ],
    "source": [
     "# reset the environment\n",
     "env_info = env.reset(train_mode=True)[brain_name]\n",
@@ -119,9 +166,102 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 5,
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "\n",
+       "                Logging results to <a href=\"https://wandb.com\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
+       "                Project page: <a href=\"https://app.wandb.ai/mfts/deep-rl\" target=\"_blank\">https://app.wandb.ai/mfts/deep-rl</a><br/>\n",
+       "                Run page: <a href=\"https://app.wandb.ai/mfts/deep-rl/runs/ooajaa17\" target=\"_blank\">https://app.wandb.ai/mfts/deep-rl/runs/ooajaa17</a><br/>\n",
+       "            "
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "INFO:wandb.run_manager:system metrics and metadata threads started\n",
+      "INFO:wandb.run_manager:checking resume status, waiting at most 10 seconds\n",
+      "INFO:wandb.run_manager:resuming run from id: UnVuOnYxOm9vYWphYTE3OmRlZXAtcmw6bWZ0cw==\n",
+      "INFO:wandb.run_manager:upserting run before process can begin, waiting at most 10 seconds\n",
+      "INFO:wandb.run_manager:saving patches\n",
+      "INFO:wandb.run_manager:saving pip packages\n",
+      "INFO:wandb.run_manager:initializing streaming files api\n",
+      "INFO:wandb.run_manager:unblocking file change observer, beginning sync with W&B servers\n"
+     ]
+    },
+    {
+     "data": {
+      "text/html": [
+       "\n",
+       "                Logging results to <a href=\"https://wandb.com\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
+       "                Project page: <a href=\"https://app.wandb.ai/mfts/deep-rl\" target=\"_blank\">https://app.wandb.ai/mfts/deep-rl</a><br/>\n",
+       "                Run page: <a href=\"https://app.wandb.ai/mfts/deep-rl/runs/15x25jzb\" target=\"_blank\">https://app.wandb.ai/mfts/deep-rl/runs/15x25jzb</a><br/>\n",
+       "            "
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122235-ooajaa17/config.yaml\n",
+      "INFO:wandb.run_manager:file/dir created: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122235-ooajaa17/wandb-summary.json\n",
+      "INFO:wandb.run_manager:file/dir created: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122235-ooajaa17/wandb-history.jsonl\n",
+      "INFO:wandb.run_manager:file/dir created: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122235-ooajaa17/requirements.txt\n",
+      "INFO:wandb.run_manager:file/dir created: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122235-ooajaa17/wandb-metadata.json\n",
+      "INFO:wandb.run_manager:file/dir created: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122235-ooajaa17/diff.patch\n",
+      "INFO:wandb.run_manager:file/dir created: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122235-ooajaa17/wandb-events.jsonl\n",
+      "INFO:wandb.run_manager:system metrics and metadata threads started\n",
+      "INFO:wandb.run_manager:checking resume status, waiting at most 10 seconds\n",
+      "INFO:wandb.run_manager:resuming run from id: UnVuOnYxOjE1eDI1anpiOmRlZXAtcmw6bWZ0cw==\n",
+      "INFO:wandb.run_manager:upserting run before process can begin, waiting at most 10 seconds\n",
+      "INFO:wandb.run_manager:saving patches\n",
+      "INFO:wandb.run_manager:saving pip packages\n",
+      "INFO:wandb.run_manager:initializing streaming files api\n",
+      "INFO:wandb.run_manager:unblocking file change observer, beginning sync with W&B servers\n",
+      "INFO:wandb.run_manager:shutting down system stats and metadata service\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/config.yaml\n",
+      "INFO:wandb.run_manager:stopping streaming files and file change observer\n",
+      "INFO:wandb.run_manager:file/dir created: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/diff.patch\n",
+      "INFO:wandb.run_manager:file/dir created: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/requirements.txt\n",
+      "INFO:wandb.run_manager:file/dir created: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-history.jsonl\n",
+      "INFO:wandb.run_manager:file/dir created: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-events.jsonl\n",
+      "INFO:wandb.run_manager:file/dir created: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-metadata.json\n",
+      "INFO:wandb.run_manager:file/dir created: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-summary.json\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122235-ooajaa17/wandb-metadata.json\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122235-ooajaa17/wandb-events.jsonl\n",
+      "INFO:wandb.run_manager:shutting down system stats and metadata service\n",
+      "Exception in thread Thread-31:\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/opt/anaconda3/envs/drlnd/lib/python3.6/threading.py\", line 916, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/opt/anaconda3/envs/drlnd/lib/python3.6/site-packages/wandb/file_pusher.py\", line 85, in run\n",
+      "    self.cleanup_file()\n",
+      "  File \"/opt/anaconda3/envs/drlnd/lib/python3.6/site-packages/wandb/file_pusher.py\", line 154, in cleanup_file\n",
+      "    os.unlink(self.tgz_path)\n",
+      "FileNotFoundError: [Errno 2] No such file or directory: '/var/folders/gf/dmvw3mx540l26pc3_2_7b2km0000gn/T/tmpdtkj8vq2wandb/batch-1.tgz'\n",
+      "\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-events.jsonl\n",
+      "INFO:wandb.run_manager:stopping streaming files and file change observer\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-metadata.json\n"
+     ]
+    }
+   ],
    "source": [
     "from agent import Agent\n",
     "\n",
@@ -171,7 +311,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 6,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -220,11 +360,137 @@
     "        # print and save Q-Network weights when a score of +13 over 100 episodes has been achieved \n",
     "        if np.mean(scores_window)>=13.0:\n",
     "            print('\\nEnviroment solved in {:d} episodes!\\tAverage Score: {:.2f}'.format(i_episode-100, np.mean(scores_window)))\n",
-    "            torch.save(agent.qnetwork_local.state_dict(), 'checkpoint.pth')\n",
+    "            torch.save(agent.qnetwork_local.state_dict(), 'checkpoint_wandb.pth')\n",
     "            break\n",
     "    return scores\n",
     "\n",
-    "scores = dqn()\n"
+    "\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 7,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "INFO:wandb.run_manager:system metrics and metadata threads started\n",
+      "INFO:wandb.run_manager:checking resume status, waiting at most 10 seconds\n",
+      "INFO:wandb.run_manager:resuming run from id: UnVuOnYxOjE1eDI1anpiOmRlZXAtcmw6bWZ0cw==\n",
+      "INFO:wandb.run_manager:upserting run before process can begin, waiting at most 10 seconds\n",
+      "INFO:wandb.run_manager:saving patches\n",
+      "INFO:wandb.run_manager:saving pip packages\n",
+      "INFO:wandb.run_manager:initializing streaming files api\n",
+      "INFO:wandb.run_manager:unblocking file change observer, beginning sync with W&B servers\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/requirements.txt\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-events.jsonl\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-history.jsonl\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/config.yaml\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-summary.json\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-metadata.json\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/diff.patch\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Episode 22\tAverage Score: -0.05"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-metadata.json\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "\r",
+      "Episode 23\tAverage Score: -0.04"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-events.jsonl\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-metadata.json\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-metadata.json\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-events.jsonl\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-metadata.json\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-metadata.json\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-events.jsonl\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-metadata.json\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-metadata.json\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "\r",
+      "Episode 24\tAverage Score: 0.00"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-events.jsonl\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-metadata.json\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-metadata.json\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-events.jsonl\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-metadata.json\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-metadata.json\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-events.jsonl\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-metadata.json\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-metadata.json\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-events.jsonl\n"
+     ]
+    },
+    {
+     "ename": "KeyboardInterrupt",
+     "evalue": "",
+     "output_type": "error",
+     "traceback": [
+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
+      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
+      "\u001b[0;32m<ipython-input-7-b9f8c29857a4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mscores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdqn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
+      "\u001b[0;32m<ipython-input-6-206641b54571>\u001b[0m in \u001b[0;36mdqn\u001b[0;34m(n_episodes, max_t, eps_start, eps_end, eps_decay)\u001b[0m\n\u001b[1;32m     20\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mt\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmax_t\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m             \u001b[0maction\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0magent\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mact\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meps\u001b[0m\u001b[0;34m)\u001b[0m                      \u001b[0;31m# agent select an action based on policy and current state\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m             \u001b[0menv_info\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0menv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maction\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mbrain_name\u001b[0m\u001b[0;34m]\u001b[0m             \u001b[0;31m# send action to the environment\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     23\u001b[0m             \u001b[0mnext_state\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0menv_info\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvector_observations\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m        \u001b[0;31m# get next state from the enviroment\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m             \u001b[0mreward\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0menv_info\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrewards\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m                        \u001b[0;31m# get reward\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
+      "\u001b[0;32m/opt/anaconda3/envs/drlnd/lib/python3.6/site-packages/unityagents/environment.py\u001b[0m in \u001b[0;36mstep\u001b[0;34m(self, vector_action, memory, text_action)\u001b[0m\n\u001b[1;32m    367\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    368\u001b[0m             outputs = self.communicator.exchange(\n\u001b[0;32m--> 369\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_generate_step_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvector_action\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmemory\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtext_action\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    370\u001b[0m             )\n\u001b[1;32m    371\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0moutputs\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
+      "\u001b[0;32m/opt/anaconda3/envs/drlnd/lib/python3.6/site-packages/unityagents/rpc_communicator.py\u001b[0m in \u001b[0;36mexchange\u001b[0;34m(self, inputs)\u001b[0m\n\u001b[1;32m     76\u001b[0m         \u001b[0mmessage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munity_input\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mCopyFrom\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     77\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munity_to_external\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparent_conn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmessage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 78\u001b[0;31m         \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munity_to_external\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparent_conn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     79\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0moutput\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mheader\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstatus\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;36m200\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     80\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
+      "\u001b[0;32m/opt/anaconda3/envs/drlnd/lib/python3.6/multiprocessing/connection.py\u001b[0m in \u001b[0;36mrecv\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    248\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_closed\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    249\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_readable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 250\u001b[0;31m         \u001b[0mbuf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_recv_bytes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    251\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0m_ForkingPickler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloads\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbuf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetbuffer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    252\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
+      "\u001b[0;32m/opt/anaconda3/envs/drlnd/lib/python3.6/multiprocessing/connection.py\u001b[0m in \u001b[0;36m_recv_bytes\u001b[0;34m(self, maxsize)\u001b[0m\n\u001b[1;32m    405\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    406\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_recv_bytes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmaxsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 407\u001b[0;31m         \u001b[0mbuf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_recv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    408\u001b[0m         \u001b[0msize\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstruct\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munpack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"!i\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetvalue\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    409\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmaxsize\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0msize\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0mmaxsize\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
+      "\u001b[0;32m/opt/anaconda3/envs/drlnd/lib/python3.6/multiprocessing/connection.py\u001b[0m in \u001b[0;36m_recv\u001b[0;34m(self, size, read)\u001b[0m\n\u001b[1;32m    377\u001b[0m         \u001b[0mremaining\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msize\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    378\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0mremaining\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 379\u001b[0;31m             \u001b[0mchunk\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mremaining\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    380\u001b[0m             \u001b[0mn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mchunk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    381\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mn\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
+      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "INFO:wandb.run_manager:shutting down system stats and metadata service\n",
+      "INFO:wandb.run_manager:stopping streaming files and file change observer\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-metadata.json\n",
+      "INFO:wandb.run_manager:file/dir modified: /Users/mfts/Developer/Udacity/nd893/p1-navigation/wandb/run-20200119_122237-15x25jzb/wandb-events.jsonl\n"
+     ]
+    }
+   ],
+   "source": [
+    "scores = dqn()"
    ]
   },
   {
diff --git a/__pycache__/agent.cpython-36.pyc b/__pycache__/agent.cpython-36.pyc
index 431cf56..ec87538 100644
Binary files a/__pycache__/agent.cpython-36.pyc and b/__pycache__/agent.cpython-36.pyc differ
diff --git a/agent.py b/agent.py
index ede4060..fb6e1a1 100644
--- a/agent.py
+++ b/agent.py
@@ -1,6 +1,8 @@
 import numpy as np
 import random
 from collections import namedtuple, deque
+import wandb
+wandb.init(project="deep-rl")
 
 from model import QNetwork as QNetwork
 
@@ -43,9 +45,14 @@ class Agent():
         self.qnetwork_target = QNetwork(state_size, action_size, seed).to(device)
         self.optimizer = optim.Adam(self.qnetwork_local.parameters(), lr=LR)
         
+        wandb.init(project="deep-rl")
+        wandb.watch(self.qnetwork_local)
+        wandb.watch(self.qnetwork_target)
+        
         # Replay memory
         self.memory = ReplayBuffer(action_size, BUFFER_SIZE, BATCH_SIZE, seed)
         
+        
         self.t_step = 0
         
     def step(self, state, action, reward, next_state, done):
@@ -60,7 +67,7 @@ class Agent():
         if self.t_step == 0:
             if len(self.memory) > BATCH_SIZE:
                    experiences = self.memory.sample()
-                   self.doublelearn(experiences, GAMMA)
+                   self.learn(experiences, GAMMA)
         
     def act(self, state, eps=0.2):
         '''
@@ -94,6 +101,8 @@ class Agent():
         # calculate loss
         loss = F.mse_loss(Q_expected, Q_targets)
         
+        wandb.log({"Loss": loss})
+        
         # minimize loss
         self.optimizer.zero_grad()
         loss.backward()
