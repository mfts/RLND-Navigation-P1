diff --git a/.ipynb_checkpoints/Navigation-checkpoint.ipynb b/.ipynb_checkpoints/Navigation-checkpoint.ipynb
index dd97519..2e5beb8 100644
--- a/.ipynb_checkpoints/Navigation-checkpoint.ipynb
+++ b/.ipynb_checkpoints/Navigation-checkpoint.ipynb
@@ -30,6 +30,13 @@
     "%matplotlib inline"
    ]
   },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
   {
    "cell_type": "markdown",
    "metadata": {},
@@ -220,11 +227,27 @@
     "        # print and save Q-Network weights when a score of +13 over 100 episodes has been achieved \n",
     "        if np.mean(scores_window)>=13.0:\n",
     "            print('\\nEnviroment solved in {:d} episodes!\\tAverage Score: {:.2f}'.format(i_episode-100, np.mean(scores_window)))\n",
-    "            torch.save(agent.qnetwork_local.state_dict(), 'checkpoint.pth')\n",
+    "            torch.save(agent.qnetwork_local.state_dict(), 'checkpoint_wandb.pth')\n",
     "            break\n",
     "    return scores\n",
     "\n",
-    "scores = dqn()\n"
+    "\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "scores = dqn()"
    ]
   },
   {
diff --git a/Navigation.ipynb b/Navigation.ipynb
index dd97519..2ee50cf 100644
--- a/Navigation.ipynb
+++ b/Navigation.ipynb
@@ -17,7 +17,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 1,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -30,6 +30,13 @@
     "%matplotlib inline"
    ]
   },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
   {
    "cell_type": "markdown",
    "metadata": {},
@@ -39,9 +46,32 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 2,
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "INFO:unityagents:\n",
+      "'Academy' started successfully!\n",
+      "Unity Academy name: Academy\n",
+      "        Number of Brains: 1\n",
+      "        Number of External Brains : 1\n",
+      "        Lesson number : 0\n",
+      "        Reset Parameters :\n",
+      "\t\t\n",
+      "Unity brain name: BananaBrain\n",
+      "        Number of Visual Observations (per agent): 0\n",
+      "        Vector Observation space type: continuous\n",
+      "        Vector Observation space size (per agent): 37\n",
+      "        Number of stacked Vector Observation: 1\n",
+      "        Vector Action space type: discrete\n",
+      "        Vector Action space size (per agent): 4\n",
+      "        Vector Action descriptions: , , , \n"
+     ]
+    }
+   ],
    "source": [
     "env = UnityEnvironment(file_name=\"Banana.app\")"
    ]
@@ -220,11 +250,27 @@
     "        # print and save Q-Network weights when a score of +13 over 100 episodes has been achieved \n",
     "        if np.mean(scores_window)>=13.0:\n",
     "            print('\\nEnviroment solved in {:d} episodes!\\tAverage Score: {:.2f}'.format(i_episode-100, np.mean(scores_window)))\n",
-    "            torch.save(agent.qnetwork_local.state_dict(), 'checkpoint.pth')\n",
+    "            torch.save(agent.qnetwork_local.state_dict(), 'checkpoint_wandb.pth')\n",
     "            break\n",
     "    return scores\n",
     "\n",
-    "scores = dqn()\n"
+    "\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "scores = dqn()"
    ]
   },
   {
diff --git a/__pycache__/agent.cpython-36.pyc b/__pycache__/agent.cpython-36.pyc
index 431cf56..d9439d8 100644
Binary files a/__pycache__/agent.cpython-36.pyc and b/__pycache__/agent.cpython-36.pyc differ
diff --git a/agent.py b/agent.py
index ede4060..6be1a21 100644
--- a/agent.py
+++ b/agent.py
@@ -1,6 +1,8 @@
 import numpy as np
 import random
 from collections import namedtuple, deque
+import wandb
+wandb.init(project="deep-rl")
 
 from model import QNetwork as QNetwork
 
@@ -43,9 +45,14 @@ class Agent():
         self.qnetwork_target = QNetwork(state_size, action_size, seed).to(device)
         self.optimizer = optim.Adam(self.qnetwork_local.parameters(), lr=LR)
         
+        wandb.init(project="deep-rl")
+        wandb.watch(self.qnetwork_local)
+        wandb.watch(self.qnetwork_target)
+        
         # Replay memory
         self.memory = ReplayBuffer(action_size, BUFFER_SIZE, BATCH_SIZE, seed)
         
+        
         self.t_step = 0
         
     def step(self, state, action, reward, next_state, done):
@@ -94,6 +101,8 @@ class Agent():
         # calculate loss
         loss = F.mse_loss(Q_expected, Q_targets)
         
+        wandb.log({"Loss": loss})
+        
         # minimize loss
         self.optimizer.zero_grad()
         loss.backward()
